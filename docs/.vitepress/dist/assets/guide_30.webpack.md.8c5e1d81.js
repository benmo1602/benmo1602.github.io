import{o as n,c as a,d as s}from"./app.6013c500.js";const p='{"title":"webpack 原理","description":"","frontmatter":{},"relativePath":"guide/30.webpack.md","lastUpdated":1624082106757}',o={},t=s('<p><strong>### webpack：</strong></p><p>\\1. 如何配置把js、css、html单独打包成一个文件</p><p><a href="https://juejin.cn/post/6972378623281987621" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6972378623281987621</a></p><div class="language-js"><pre><code>step1<span class="token operator">:</span> 实例化compiler\n\n  实例化 compiler 对象\n  初始化 <span class="token function">NodeEnvironmentPlugin</span><span class="token punctuation">(</span>让compiler具体文件读写能力<span class="token punctuation">)</span>\n  挂载所有 plugins 插件至 compiler 对象身上\n  挂载所有 webpack 内置的插件（入口）\n\nstep2<span class="token operator">:</span> compiler<span class="token punctuation">.</span>run\n\n  <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeRun<span class="token punctuation">.</span>callAsync <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span>callAsync <span class="token operator">-</span><span class="token operator">&gt;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>compile\n    <span class="token keyword">this</span><span class="token punctuation">.</span>compile 接收 onCompiled\n    onCompiled 内容是： 最终在这里将处理好的 chunk 写入到指定的文件然后输出至 dist （文件输出路径，不一定是dist）\n\nstep3<span class="token operator">:</span> compile方法做的事情\n  newCompilationParams，实例化Compilation对象之前先初始化其所需参数\n  调用<span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>beforeRun<span class="token punctuation">.</span>callAsync\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newCompilation</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> 实例化Compilation对象\n    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>make<span class="token punctuation">.</span>callAsync  触发make钩子监听\n    compilation<span class="token punctuation">.</span>seal 开始处理 chunk\n    <span class="token keyword">this</span><span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterCompile<span class="token punctuation">.</span><span class="token function">callAsync</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span>\n    流程进入compilation了。。。\n\nstep4<span class="token operator">:</span> 完成模块编译操作\n\n  addEntry\n    _addModuleChain\n    createModule：定义一个创建模块的方法，达到复用的目的\n    module <span class="token operator">=</span> normalModuleFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> ： 创建普通模块，目的是用来加载js模块\n    afterBuild\n    <span class="token keyword">this</span><span class="token punctuation">.</span>processDependencies ： 找到模块与模块之间的依赖关系\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildModule</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> afterBuild<span class="token punctuation">)</span>\n    module<span class="token punctuation">.</span>build <span class="token operator">:</span> 到这里就意味着当前 Module 的编译完成了\n  seal<span class="token operator">:</span> 生成代码内容<span class="token punctuation">,</span>输出文件\n</code></pre></div><p>\\2. loader执行顺序，从下而上，从右而左</p><p>​</p><p>\\3. plugin</p><p>Compression-webpack-plugin</p><p>Terse-webpack-plugin</p><p>Theme-color-replace</p><h4 id="webpack-原理"><a class="header-anchor" href="#webpack-原理" aria-hidden="true">#</a> webpack 原理</h4><h4 id="babel-原理"><a class="header-anchor" href="#babel-原理" aria-hidden="true">#</a> babel 原理</h4><h4 id="虚拟-dom-的理解"><a class="header-anchor" href="#虚拟-dom-的理解" aria-hidden="true">#</a> 虚拟 DOM 的理解</h4><h4 id="项目里如何做的性能优化"><a class="header-anchor" href="#项目里如何做的性能优化" aria-hidden="true">#</a> 项目里如何做的性能优化</h4><h4 id="写过webpack-loader-或者插件吗"><a class="header-anchor" href="#写过webpack-loader-或者插件吗" aria-hidden="true">#</a> 写过webpack loader 或者插件吗</h4><h4 id="讲讲你写的-babel-插件-作者：焖豆不闷-https-www-bilibili-com-read-cv11635943-出处：bilibili"><a class="header-anchor" href="#讲讲你写的-babel-插件-作者：焖豆不闷-https-www-bilibili-com-read-cv11635943-出处：bilibili" aria-hidden="true">#</a> 讲讲你写的 babel 插件 作者：焖豆不闷 <a href="https://www.bilibili.com/read/cv11635943/" target="_blank" rel="noopener noreferrer">https://www.bilibili.com/read/cv11635943/</a> 出处：bilibili</h4><p>​</p>',17);o.render=function(s,p,o,e,c,l){return n(),a("div",null,[t])};export default o;export{p as __pageData};
