import{o as t,c as e,d as r}from"./app.8f4d3ffd.js";const p='{"title":"","description":"","frontmatter":{},"relativePath":"guide/32.变量提升.md","lastUpdated":1623740475249}',o={},n=r('<p>变量提升</p><p>​ 解析 &gt; 编译 &gt; 执行</p><p>在解析阶段，JS会检查语法，并对函数进行预编译。 接下来是执行阶段，这个阶段没什么好讲的，就是逐条解释每条语句并执行。</p><p>提高性能</p><p>解析的过程中，还会为函数生成预编译代码。在预编译时，会统计该函数声明了哪些变量、创建了哪些函数（<strong>注：这里就是声明提升</strong>），并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取函数中声明了哪些变量，<strong>注：这也是声明提升的好处</strong>），并且代码执行更快（因为压缩而变短了）。两个好处都会提高执行函数的性能。</p><p>容错性好</p><ol><li>解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</li><li>声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行</li><li></li></ol><p>[<a href="https://segmentfault.com/q/1010000013591021" target="_blank" rel="noopener noreferrer">js中为什么要进行变量提升？</a>](<a href="https://segmentfault.com/q/1010000013591021" target="_blank" rel="noopener noreferrer">https://segmentfault.com/q/1010000013591021</a>)</p>',8);o.render=function(r,p,o,a,l,s){return t(),e("div",null,[n])};export default o;export{p as __pageData};
