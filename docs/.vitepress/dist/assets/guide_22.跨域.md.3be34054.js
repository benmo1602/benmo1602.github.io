import{o as e,c as i,d as r}from"./app.6013c500.js";const o='{"title":"js的跨域方式","description":"","frontmatter":{},"headers":[{"level":3,"title":"js的跨域方式","slug":"js的跨域方式"},{"level":3,"title":"jsonp","slug":"jsonp"},{"level":3,"title":"WebSocket","slug":"websocket"},{"level":3,"title":"nginx 反向代理","slug":"nginx-反向代理"}],"relativePath":"guide/22.跨域.md","lastUpdated":1623834611779}',s={},a=r('<h3 id="js的跨域方式"><a class="header-anchor" href="#js的跨域方式" aria-hidden="true">#</a> js的跨域方式</h3><p><code>URL</code>由<strong>协议</strong>，<strong>域名</strong>，<strong>端口</strong>以及<strong>路径</strong>组成，若两个<code>URL</code>的协议、域名和端口相同，则表示他们同源。</p><p>src 标签允许 跨域加载资源img 、link、script （jsonp）</p><ol><li><h3 id="jsonp"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> jsonp</h3></li><li><p>利用script标签的src属性来实现跨域</p></li><li><p>过将前端方法作为参数传递到服务器端，然后由服务器端注入参数之后再返回，实现服务器端向客户端通信</p></li><li><p>由于使用script标签的src属性，因此只支持get方法</p></li><li><p>失败没有 http状态码，安全问题 若服务器存在注入漏洞、返回的js内容被人控制</p></li><li><p>jq 支持jsonp dataType</p></li><li><h4 id="cors"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> cors</h4></li></ol><p><code>cors</code>全称&quot;跨域资源共享&quot;(Cross-origin resource sharing), 是一种ajax跨域请求资源的方式。</p><ol><li><p>cors需要浏览器和服务器同时支持，才可以实现跨域的请求</p></li><li><p>这个方法几乎所有的浏览器都支持，但是ie必须是10以上</p></li><li><p>ie8和9需要通过XDomainRequest来实现</p></li><li><p><strong>iframe</strong>、 <strong>postMessage</strong></p></li><li><h6 id="window-name-、-location-hash"><a class="header-anchor" href="#window-name-、-location-hash" aria-hidden="true">#</a> <a href="http://Window.name" target="_blank" rel="noopener noreferrer">Window.name</a> 、 location.hash</h6></li><li><p>domain</p><p>主要用于主域相同的域之间的数据通信，<strong>注意</strong> 仅限主域相同，子域不同的跨域应用场景。</p><p><strong>实现的原理</strong>：两个页面都通过js强制设置 <code>document.domain</code> 为基础主域，就实现了同域</p></li><li><h3 id="websocket"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h3></li><li><h3 id="nginx-反向代理"><a class="header-anchor" href="#nginx-反向代理" aria-hidden="true">#</a> nginx 反向代理</h3></li><li><p>nginx 的 http、 server 、 loaction 、 proxy</p></li></ol>',6);s.render=function(r,o,s,n,t,l){return e(),i("div",null,[a])};export default s;export{o as __pageData};
