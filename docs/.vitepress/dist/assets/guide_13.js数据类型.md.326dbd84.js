import{o as n,c as s,d as a}from"./app.6013c500.js";const t='{"title":"","description":"","frontmatter":{},"relativePath":"guide/13.js数据类型.md","lastUpdated":1623461016641}',p={},o=a('<p>js数据类型</p><div class="language-js"><pre><code><span class="token number">8</span>种\n<span class="token keyword">undefined</span>、 <span class="token keyword">null</span>、 Number 、 string、 Boolern、 symbol、 BigInt、 object\n内置对象\nArray\nAggregateError <span class="token comment">// 错误集合</span>\nArrayBuffer\n\n</code></pre></div><p>判断js数据类型的方法</p><div class="language-js"><pre><code><span class="token number">1.</span>最常见的判断方法：<span class="token keyword">typeof</span>\n\n<span class="token number">2.</span>已知对象类型<span class="token operator">:</span>   <span class="token keyword">instanceof</span> \n\n<span class="token class-name">3<span class="token punctuation">.</span></span>对象原型链判断方法： prototype 通用但很繁琐\n\n<span class="token number">4.</span>根据对象的构造器constructor进行判断\n\n<span class="token number">5.</span>jQuery方法： jquery<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token number">6.</span>严格运算符<span class="token operator">:</span>   <span class="token operator">===</span>\n</code></pre></div><ol><li>typeof</li></ol><div class="language-js"><pre><code><span class="token number">6</span> 种原始类型，使用 <span class="token keyword">typeof</span> 运算符检查<span class="token operator">:</span>\n  <span class="token keyword">undefined</span>：<span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">&quot;undefined&quot;</span>\n  Boolean：<span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">&quot;boolean&quot;</span>\n  Number：<span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span>\n  String：<span class="token keyword">typeof</span> instance <span class="token operator">===</span> &quot;string\n  BigInt：<span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">&quot;bigint&quot;</span>\n  Symbol ：<span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">&quot;symbol&quot;</span>\n<span class="token keyword">null</span>：<span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span>。\nObject：<span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span>。\n\n缺点：\n任何 constructed 对象实例的特殊非数据结构类型，也用做数据结构：\n\t<span class="token keyword">new</span> <span class="token class-name">Object</span>，\n\t<span class="token keyword">new</span> <span class="token class-name">Array</span>，\n\t<span class="token keyword">new</span> <span class="token class-name">Map</span>，\n\t<span class="token keyword">new</span> <span class="token class-name">Set</span>，\n\t<span class="token keyword">new</span> <span class="token class-name">WeakMap</span>，\n\t<span class="token keyword">new</span> <span class="token class-name">WeakSet</span>，\n\t<span class="token keyword">new</span> <span class="token class-name">Date</span>，\n\t<span class="token keyword">typeof</span> 的结果都是 object\n</code></pre></div><ol start="2"><li>instanceof</li></ol><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>           <span class="token comment">// true</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Date</span>         <span class="token comment">// true</span>\n<span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment">// true</span>\n<span class="token keyword">null</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span>             <span class="token comment">// false</span>\n</code></pre></div><p>3.对象原型链判断方法： prototype toString</p><div class="language-js"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&quot;11&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        \t\t<span class="token comment">// [object String]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          \t\t<span class="token comment">// [object Number]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [object Number]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         \t<span class="token comment">// [object Boolean]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    \t\t\t<span class="token comment">// [object Array]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        \t \t<span class="token comment">// [object Null]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     \t <span class="token comment">// [object Undefined]</span>\n</code></pre></div><ol start="4"><li>constructor</li></ol><div class="language-js"><pre><code>constructor 判断方法跟<span class="token keyword">instanceof</span>相似<span class="token punctuation">,</span>但是constructor检测Object与<span class="token keyword">instanceof</span>不一样<span class="token punctuation">,</span>constructor还可以处理基本数据类型的检测<span class="token punctuation">,</span>不仅仅是对象类型\n注意<span class="token operator">:</span>\n\t<span class="token number">1.</span>null和<span class="token keyword">undefined</span>没有constructor<span class="token punctuation">;</span>\n\t<span class="token number">2.</span><span class="token function">判断数字时使用</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">比如</span>  <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">,</span><span class="token class-name">如果写成123</span><span class="token punctuation">.</span>constructor会报错\n\t<span class="token number">3.</span>constructor在类继承时会出错<span class="token punctuation">,</span>因为Object被覆盖掉了<span class="token punctuation">,</span>检测结果就不对了\n</code></pre></div><p>五.jQuery方法： jquery.type()</p><div class="language-"><pre><code>据说是无敌万能的方法.如果对象是null跟undefined,直接返回&quot;null&quot;和&quot;undefined&quot;,\n\n注意:在使用时,一定要引入jquery文件,不然会报错,jQuery is not defined\n\n\n一般变量用typeof,\n\n已知对象类型用instanceof,\n\n通用方法Object.prototype.toString.call()\n\njQuery项目万能方法jQuery.type()\n</code></pre></div><p>参照jq 封装</p><div class="language-js"><pre><code><span class="token keyword">const</span> class2type <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> typeList <span class="token operator">=</span> <span class="token string">&quot;Boolean Number String Function Array Date RegExp Object Error Symbol Bigint&quot;</span><span class="token punctuation">;</span>\ntypeList<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  class2type<span class="token punctuation">[</span><span class="token string">&quot;[object &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">toType</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> obj <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span>\n    <span class="token operator">?</span> class2type<span class="token punctuation">[</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;object&quot;</span>\n    <span class="token operator">:</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',16);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
