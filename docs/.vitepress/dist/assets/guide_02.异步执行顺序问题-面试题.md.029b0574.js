import{o as n,c as s,d as a}from"./app.6013c500.js";const t='{"title":"","description":"","frontmatter":{},"relativePath":"guide/02.异步执行顺序问题-面试题.md","lastUpdated":1623239156118}',p={},o=a('<p><strong>20200518面试题</strong></p><p>阅读下面代码，我们只考虑浏览器环境下的输出结果，写出它们结果打印的先后顺序，并分析出原因，小伙伴们，加油哦！</p><div class="language-javascript"><pre><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;AAAA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;BBBB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;CCCC&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;DDDD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;FFFF&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;GGGG&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;HHHH&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;IIII&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>答案：</strong></p><p>浏览器下 输出结果的先后顺序是</p><div class="language-ts"><pre><code><span class="token constant">DDDD</span>\n<span class="token constant">AAAA</span>\n<span class="token constant">CCCC</span>\n<span class="token constant">BBBB</span>\n<span class="token constant">GGGG</span>\n<span class="token constant">IIII</span>\n<span class="token constant">HHHH</span>\n<span class="token constant">FFFF</span>\n</code></pre></div><p>答案解析：这道题考察重点是 js异步执行 宏任务 微任务.</p><p>这道题的坑就在于 async中如果没有await，那么它就是一个纯同步函数。</p><p>这道题的起始代码在第9行，输出<code>DDDD</code></p><p>第10行计时器开启一个异步任务t1（一个称呼），这个任务且为宏任务。</p><p>第13行函数<code>async1</code>执行，这个函数内没有await 所以它其实就是一个纯同步函数，打印输出<code>AAAA</code>,</p><p>在<code>async1</code>中执行<code>async2</code>函数，因为<code>async2</code>的内部也没有await，所以它也是个纯同步函数，打印输出<code>CCCC</code></p><p>紧接着打印输出<code>BBBB</code>。</p><p>第14行new Promise执行里面的代码也是同步的,所以打印输出<code>GGGG</code>,resolve()调用的时候开启一个异步任务t2（一个称呼），且这个任务t2是微任务，它的执行交给then()中的第一个回调函数执行，且优先级高于宏任务（t1）执行。</p><p>第20行打印输出<code>IIII</code>,此时线程上的同步任务全部执行结束。</p><p>在执行任务队列中的异步任务时，微任务优先于宏任务执行，所以先执行微任务 t2 打印输出 <code> HHHH</code>,然后执行宏任务 t1 打印输出 <code>FFFF</code></p><p>所以综上 结果输出是 DDDD AAAA CCCC BBBB GGGG IIII HHHH FFFF</p>',17);p.render=function(a,t,p,c,e,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
