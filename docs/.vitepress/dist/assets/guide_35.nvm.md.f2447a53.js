import{o as n,c as l,a as s,b as a}from"./app.8f4d3ffd.js";const e='{"title":"os x开发环境： nvm、 yarn 、 npm link、 yalc","description":"","frontmatter":{},"headers":[{"level":3,"title":"os x开发环境： nvm、 yarn 、 npm link、 yalc","slug":"os-x开发环境：-nvm、-yarn-、-npm-link、-yalc"}],"relativePath":"guide/35.nvm.md","lastUpdated":1625130822053}',o={},c=s("h3",{id:"os-x开发环境：-nvm、-yarn-、-npm-link、-yalc"},[s("a",{class:"header-anchor",href:"#os-x开发环境：-nvm、-yarn-、-npm-link、-yalc","aria-hidden":"true"},"#"),a(" os x开发环境： nvm、 yarn 、 npm link、 yalc")],-1),t=s("h4",{id:"_1-切换终端版本"},[s("a",{class:"header-anchor",href:"#_1-切换终端版本","aria-hidden":"true"},"#"),a(" 1. 切换终端版本")],-1),u=s("p",null,"使用 zsh 替换 bash： chsh -s /bin/zsh",-1),r=s("h4",{id:"_2-nvm-管理本地多版本node"},[s("a",{class:"header-anchor",href:"#_2-nvm-管理本地多版本node","aria-hidden":"true"},"#"),a(" 2. nvm 管理本地多版本node")],-1),i=s("p",null,"删除当前版本的node 、npm",-1),d=s("div",{class:"language-"},[s("pre",null,[s("code",null,"sudo rm /usr/local/bin/npm\nsudo rm /usr/local/share/man/man1/node.1\nsudo rm /usr/local/lib/dtrace/node.d\nsudo rm -rf ~/.npm\nsudo rm -rf ~/.node-gyp\nsudo rm /opt/local/bin/node\nsudo rm /opt/local/include/node\nsudo rm -rf /opt/local/lib/node_modules\n")])],-1),p=s("p",null,"下载 nvm",-1),m=s("div",{class:"language-shell"},[s("pre",null,[s("code",null,[s("span",{class:"token function"},"curl"),a(" -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh "),s("span",{class:"token operator"},"|"),a(),s("span",{class:"token function"},"zsh"),a("\n")])])],-1),h=s("p",null,"下载node",-1),g=s("div",{class:"language-"},[s("pre",null,[s("code",null,"nvm install 12\n// 12.x.x  下载12最新版本\n")])],-1),k=s("p",null,"切换版本",-1),v=s("div",{class:"language-"},[s("pre",null,[s("code",null,"nvm use 12\nnvm use node // 切换到最新版\nnvm use iojs-v3.2.0\n")])],-1),y=s("p",null,"配置别名",-1),f=s("div",{class:"language-"},[s("pre",null,[s("code",null,"nvm alias awesome-version 4.2.2\nnvm alias default node\nnvm ls\n")])],-1),b=s("p",null,"项目中通过 .nvmrc 文件 指定node 版本",-1),_=s("ul",null,[s("li",null,[s("strong",null,"nvm install node"),a(" 安装最新版 Node")]),s("li",null,[s("strong",null,"nvm install iojs"),a(" 安装最新版 iojs")]),s("li",null,[s("strong",null,"nvm install unstable"),a(" 安装最新不稳定版本的 Node")])],-1),x=s("h4",{id:"_3-yarn-安装"},[s("a",{class:"header-anchor",href:"#_3-yarn-安装","aria-hidden":"true"},"#"),a(" 3. yarn 安装")],-1),j=s("div",{class:"language-shell"},[s("pre",null,[s("code",null,[s("span",{class:"token function"},"curl"),a(" -o- -L https://yarnpkg.com/install.sh ｜ "),s("span",{class:"token function"},"zsh"),a("\n")])])],-1),w=s("h4",{id:"_4-npm-link-将调试的包跟项目中做一个软链"},[s("a",{class:"header-anchor",href:"#_4-npm-link-将调试的包跟项目中做一个软链","aria-hidden":"true"},"#"),a(" 4. npm link 将调试的包跟项目中做一个软链")],-1),N=s("div",{class:"language-"},[s("pre",null,[s("code",null,"cd 对应npm包地址\nnpm link\n\ncd 项目地址\nnpm link npm-packname\n\n// 日志\nlink /对应的包实际地址@ -> /Users/beidan/.nvm/versions/node/v14.5.0/lib/node_modules/npm-test\n")])],-1),z=s("p",null,[a("对于 Npm link 方式，"),s("strong",null,"「因为 Npm 和 项目属于不同的项目，它们有自己的 node_modules」"),a(",如果组件和应用都使用了同一个依赖，它们会在各自的 node_modules 去查找，如果这个依赖不支持多例，应用就会异常。如果 npm 的编译规则 和应用的编译规则不匹配，也同样会出问题。如下：")],-1),R=s("div",{class:"language-"},[s("pre",null,[s("code",null,"hooks can only be called inside the body of a function component\n\nNPM 组件 和你的项目使用了 React Hooks 的情况，React 会报致命异常。（原因是 React Hooks 依赖上下文，所以全局只能使用一个，即使是版本完全一样的，官方推荐的解决方法 React 错误提示[2]）\n")])],-1),C=s("h4",{id:"_5-yalc"},[s("a",{class:"header-anchor",href:"#_5-yalc","aria-hidden":"true"},"#"),a(" 5. yalc")],-1),H=s("div",{class:"language-shell"},[s("pre",null,[s("code",null,[s("span",{class:"token function"},"npm"),a(" i yalc -g\nyalc publish *// 在对应的 "),s("span",{class:"token function"},"npm"),a(" 包中发布*\nyalc "),s("span",{class:"token function"},"link"),a(" *// 在对应的项目中 "),s("span",{class:"token function"},"link"),a(" 对应的包*\n")])])],-1),P=s("p",null,"实现流程化",-1),U=s("p",null,[s("img",{src:"/assets/image-20210629190331821.0a5bb82f.png",alt:"image-20210629190331821"})],-1),L=s("p",null,"使用nodemon 监听文件的变化",-1),M=s("div",{class:"language-"},[s("pre",null,[s("code",null,'nodemon\n --ignore dist/ # 忽略目录\n --ignore node_modules/\n --watch projects # 观察目录\n -C # 只在变更后执行，首次启动不执行命令\n -e ts,html,less,scss # 监控指定后缀名的文件\n --debug # 调试\n -x "npm run build && yalc push" # 自定义命令\n')])],-1),q=s("ol",null,[s("li",null,"在npm 包中添加命令")],-1),A=s("div",{class:"language-js"},[s("pre",null,[s("code",null,[s("span",{class:"token string"},'"scripts"'),s("span",{class:"token operator"},":"),a(),s("span",{class:"token punctuation"},"{"),a("\n    "),s("span",{class:"token string"},'"build"'),s("span",{class:"token operator"},":"),a(),s("span",{class:"token string"},'"打包包的命令"'),s("span",{class:"token punctuation"},","),a("\n    "),s("span",{class:"token string"},'"async"'),s("span",{class:"token operator"},":"),a(),s("span",{class:"token string"},'"npm run build && yalc push"'),s("span",{class:"token punctuation"},","),a("\n    "),s("span",{class:"token string"},'"watch"'),s("span",{class:"token operator"},":"),a(),s("span",{class:"token string"},"\"nodemon --ignore dist/ --ignore node_modules/ --watch src/ -C -e ts,tsx,scss --debug -x 'tnpm run async'\""),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token comment"},"// 自动监听"),a("\n  "),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},","),a("\n")])])],-1),B=s("p",null,"2 项目中",-1),D=s("div",{class:"language-"},[s("pre",null,[s("code",null,"yalc link 包名\nnpm run start\n")])],-1),E=s("p",null,"这样子，在 npm 包中修改，在项目中可以快速看到结果，快速验证了，并且不会出现 npm link 中各种奇奇怪怪的问题",-1);o.render=function(s,a,e,o,F,G){return n(),l("div",null,[c,t,u,r,i,d,p,m,h,g,k,v,y,f,b,_,x,j,w,N,z,R,C,H,P,U,L,M,q,A,B,D,E])};export default o;export{e as __pageData};
