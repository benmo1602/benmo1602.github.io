import{o as e,c as t,a as r,b as n}from"./app.6013c500.js";const o='{"title":"18. 原声的事件监听函数事件 EventEmitter 绑定和事件触发 on, remove, emit, once","description":"","frontmatter":{},"headers":[{"level":3,"title":"18. 原声的事件监听函数事件 EventEmitter 绑定和事件触发 on, remove, emit, once","slug":"_18-原声的事件监听函数事件-eventemitter-绑定和事件触发-on-remove-emit-once"}],"relativePath":"guide/18.EventEmitter.md","lastUpdated":1623513982163}',i={},m=r("h3",{id:"_18-原声的事件监听函数事件-eventemitter-绑定和事件触发-on-remove-emit-once"},[r("a",{class:"header-anchor",href:"#_18-原声的事件监听函数事件-eventemitter-绑定和事件触发-on-remove-emit-once","aria-hidden":"true"},"#"),n(" 18. 原声的事件监听函数事件 EventEmitter 绑定和事件触发 on, remove, emit, once")],-1),a=r("p",null,"Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。",-1),v=r("p",null,"Node.js 里面的许多对象都会分发事件：",-1),l=r("p",null,"​ 一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。",-1);i.render=function(r,n,o,i,d,s){return e(),t("div",null,[m,a,v,l])};export default i;export{o as __pageData};
