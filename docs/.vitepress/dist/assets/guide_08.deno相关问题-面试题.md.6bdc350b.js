import{o as e,c as r,d as t}from"./app.6013c500.js";const a='{"title":"Deno发公告说要把部分ts代码重构为js。 你觉得这是什么原因？【开放性讨论】","description":"","frontmatter":{},"headers":[{"level":2,"title":"学员讨论","slug":"学员讨论"},{"level":2,"title":"官方回答","slug":"官方回答"},{"level":2,"title":"扩展链接","slug":"扩展链接"}],"relativePath":"guide/08.deno相关问题-面试题.md","lastUpdated":1623297716083}',i={},o=t('<h1 id="deno发公告说要把部分ts代码重构为js。-你觉得这是什么原因？【开放性讨论】"><a class="header-anchor" href="#deno发公告说要把部分ts代码重构为js。-你觉得这是什么原因？【开放性讨论】" aria-hidden="true">#</a> Deno发公告说要把部分ts代码重构为js。 你觉得这是什么原因？【开放性讨论】</h1><h2 id="学员讨论"><a class="header-anchor" href="#学员讨论" aria-hidden="true">#</a> 学员讨论</h2><ol><li>node是把包下载到本地，deno是直接引用远程地址</li><li>编译时间太长，所以放弃了 ts</li><li>还有一些场景不太适合 ts：经常修改原型链的，需要运行时动态添加属性的。</li></ol><h2 id="官方回答"><a class="header-anchor" href="#官方回答" aria-hidden="true">#</a> 官方回答</h2><p>在使用 TypeScript 编写内部代码时，Deno 团队遇到了以下几个现实问题： 在变更文件时，TypeScript 往往需要几分钟的编译时间，这就导致连续编译过程变得非常缓慢； 在创建 Deno 可执行文件以及面向用户的 API 源文件时，TypeScript 结构会引发一系列运行时性能问题； TypeScript 本身对于 Deno 代码的组织工作毫无帮助，反而增强了代码组织负担。Deno 团队提出的一大现实问题，是 TypeScript 会在两个位置复制相互独立的 Body 类； <a href="https://github.com/denoland/deno/issues/4748" target="_blank" rel="noopener noreferrer">https://github.com/denoland/deno/issues/4748</a> 由于 TypeScript 编译器无法帮助开发者生成 d.ts 文件，内部代码与运行时 TypeScript 声明必须以手动方式保持同步； 他们维护着两台 TS 编译器主机：一台用于内部 Deno 代码，另一台用于外部用户代码，但二者的作用其实非常相似。</p><h2 id="扩展链接"><a class="header-anchor" href="#扩展链接" aria-hidden="true">#</a> 扩展链接</h2><ol><li><a href="https://mp.weixin.qq.com/s/h1ZNewMZZC20o80P37KqsQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/h1ZNewMZZC20o80P37KqsQ</a></li></ol>',7);i.render=function(t,a,i,n,s,l){return e(),r("div",null,[o])};export default i;export{a as __pageData};
