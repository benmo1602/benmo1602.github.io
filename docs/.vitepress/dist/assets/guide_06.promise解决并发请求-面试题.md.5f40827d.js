import{o as n,c as s,d as a}from"./app.8f4d3ffd.js";const p='{"title":"20200622面试题答案解析","description":"","frontmatter":{},"headers":[{"level":2,"title":"20200622面试题答案解析","slug":"_20200622面试题答案解析"},{"level":3,"title":"解题思路","slug":"解题思路"},{"level":3,"title":"参考答案","slug":"参考答案"}],"relativePath":"guide/06.promise解决并发请求-面试题.md","lastUpdated":1617853712034}',t={},o=a('<h2 id="_20200622面试题答案解析"><a class="header-anchor" href="#_20200622面试题答案解析" aria-hidden="true">#</a> 20200622面试题答案解析</h2><div class="language-js"><pre><code><span class="token keyword">var</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/1&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/2&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/3&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/4&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/5&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/6&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/7&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/8&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/9&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/10&#39;</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">function</span> <span class="token function">loadDate</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在 <code>urls</code> 数组中存放了 10 个接口地址。同时还定义了一个 <code>loadDate</code> 函数，这个函数接受一个 <code>url</code> 参数，返回一个 <code>Promise</code> 对象，该 <code>Promise</code> 在接口调用成功时返回 <code>resolve</code>，失败时返回 <code>reject</code>。</p><p>要求：任意时刻，同时下载的链接数量不可以超过 3 个。 试写出一段代码实现这个需求，要求尽可能快速地将所有接口中的数据得到。</p><hr><h3 id="解题思路"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h3><p>按照题意我们可以这样做，首先并发请求 3 个 <code>url</code> 中的数据，当其中一条 <code>url</code> 请求得到数据后，立即发起对一条新 <code>url</code> 上数据的请求，我们要始终让并发数保持在 3 个，直到所有需要加载数据的 <code>url</code> 全部都完成请求并得到数据。</p><p>用 Promise 实现的思路就是，首先并发请求3个 <code>url</code> ，得到 3 个 <code>Promise</code> ，然后组成一个叫 <code>promises</code> 的数组。再不断的调用 <code>Promise.race</code> 来返回最快改变状态的 <code>Promise</code> ，然后从数组<code>promises</code>中删掉这个 <code>Promise</code> 对象，再加入一个新的 <code>Promise</code>，直到所有的 <code>url</code> 被取完，最后再使用 <code>Promise.all</code> 来处理一遍数组<code>promises</code>中没有改变状态的 <code>Promise</code>。</p><h3 id="参考答案"><a class="header-anchor" href="#参考答案" aria-hidden="true">#</a> 参考答案</h3><div class="language-jsx"><pre><code><span class="token keyword">var</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/1&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/2&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/3&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/4&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/5&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/6&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/7&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/8&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/9&#39;</span><span class="token punctuation">,</span> \n  <span class="token string">&#39;http://jsonplaceholder.typicode.com/posts/10&#39;</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">function</span> <span class="token function">loadDate</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>\n    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">limitLoad</span><span class="token punctuation">(</span><span class="token parameter">urls<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 对数组进行一个拷贝</span>\n    <span class="token keyword">const</span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span>\n    <span class="token keyword">let</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//实现并发请求达到最大值</span>\n    promises <span class="token operator">=</span> sequence<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 这里返回的 index 是任务在数组 promises 的脚标</span>\n        <span class="token comment">//用于在 Promise.race 后找到完成的任务脚标</span>\n        <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> index\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 利用数组的 reduce 方法来以队列的形式执行</span>\n    <span class="token keyword">return</span> sequence<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">last<span class="token punctuation">,</span> url<span class="token punctuation">,</span> currentIndex</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> last<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 返回最快改变状态的 Promise</span>\n            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 这里的 catch 不仅用来捕获前面 then 方法抛出的错误</span>\n            <span class="token comment">// 更重要的是防止中断整个链式调用</span>\n            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 用新的 Promise 替换掉最快改变状态的 Promise</span>\n            promises<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>sequence<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> res <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    \n<span class="token punctuation">}</span>\n<span class="token function">limitLoad</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> loadDate<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n\n<span class="token comment">/*\n因为 loadDate 函数也返回一个 Promise\n所以当 所有图片加载完成后可以继续链式调用\n\nlimitLoad(urls, loadDate, 3).then(() =&gt; {\n    console.log(&#39;所有url数据请求成功&#39;);\n}).catch(err =&gt; {\n    console.error(err);\n})\n*/</span>\n</code></pre></div>',10);t.render=function(a,p,t,c,e,u){return n(),s("div",null,[o])};export default t;export{p as __pageData};
