import{o as e,c as a,d as r}from"./app.6013c500.js";const n='{"title":"19. 对闭包的理解、工程中闭包使用场景:","description":"","frontmatter":{},"headers":[{"level":3,"title":"19. 对闭包的理解、工程中闭包使用场景:","slug":"_19-对闭包的理解、工程中闭包使用场景"},{"level":3,"title":"es6之前的模仿块级作用域、递归调用问题","slug":"es6之前的模仿块级作用域、递归调用问题"},{"level":3,"title":"执行上下文","slug":"执行上下文"}],"relativePath":"guide/19.闭包.md","lastUpdated":1623724757620}',i={},l=r('<h3 id="_19-对闭包的理解、工程中闭包使用场景"><a class="header-anchor" href="#_19-对闭包的理解、工程中闭包使用场景" aria-hidden="true">#</a> 19. 对闭包的理解、工程中闭包使用场景:</h3><p>闭包是在一个函数作用于内 访问函数内的私有变量</p><h3 id="es6之前的模仿块级作用域、递归调用问题"><a class="header-anchor" href="#es6之前的模仿块级作用域、递归调用问题" aria-hidden="true">#</a> es6之前的模仿块级作用域、递归调用问题</h3><ol><li><p>返回值 vue 的 data</p></li><li><p>函数赋值</p></li><li><p>函数参数</p></li><li><p>IIFE ( 自执行函数)</p></li><li><p>循环赋值 （解决 for 中let 作用 ）</p></li><li><p>getter 、 setter</p><div class="language-"><pre><code>function fn(){\n    var name=&#39;hello&#39;\n    setName=function(n){\n        name = n;\n    }\n    getName=function(){\n        return name;\n    }\n\n    //将setName，getName作为对象的属性返回\n    return {\n        setName:setName,\n        getName:getName\n    }\n}\nvar fn1 = fn();//返回对象，属性setName和getName是两个函数\nconsole.log(fn1.getName());//getter\nfn1.setName(&#39;world&#39;);//setter修改闭包里面的name\nconsole.log(fn1.getName());//getter\n</code></pre></div><ol start="7"><li>迭代器（执行一次函数 往下取一次值）</li><li>缓存</li></ol></li></ol><h3 id="执行上下文"><a class="header-anchor" href="#执行上下文" aria-hidden="true">#</a> 执行上下文</h3><ul><li><code>全局执行上下文</code>： 代码开始执行时首先进入的环境。</li><li><code>函数执行上下文</code>：函数调用时，会开始执行函数中的代码。</li><li><code>eval执行上下文</code>：不建议使用，可忽略。</li></ul><p>执行上下文的周期，分为两个阶段</p><h4 id="创建阶段"><a class="header-anchor" href="#创建阶段" aria-hidden="true">#</a> 创建阶段</h4><p>​ 创建词法环境、生成变量对象（建立作用域链）、 确认this 指向</p><h4 id="执行期上下文"><a class="header-anchor" href="#执行期上下文" aria-hidden="true">#</a> 执行期上下文</h4><pre><code>1. 创建AO对象\n2. 找形参和变量声明， 将变量和形参作为AO属性名，值为undefined\n3. 实参和形参统一\n4. 在函数体找到函数声明， 值赋予函数体。\n</code></pre><h4 id="执行阶段"><a class="header-anchor" href="#执行阶段" aria-hidden="true">#</a> 执行阶段</h4><p>​ 变量赋值、函数引用及执行代码</p><h5 id="_1-变量对象"><a class="header-anchor" href="#_1-变量对象" aria-hidden="true">#</a> 1. 变量对象</h5><h5 id="_2-变量对象（vo）的创建过程"><a class="header-anchor" href="#_2-变量对象（vo）的创建过程" aria-hidden="true">#</a> 2. 变量对象（vo）的创建过程</h5><h5 id="_3-变量对象变为轰动对象"><a class="header-anchor" href="#_3-变量对象变为轰动对象" aria-hidden="true">#</a> 3. 变量对象变为轰动对象</h5><h5 id="_4"><a class="header-anchor" href="#_4" aria-hidden="true">#</a> 4.</h5>',17);i.render=function(r,n,i,d,t,h){return e(),a("div",null,[l])};export default i;export{n as __pageData};
